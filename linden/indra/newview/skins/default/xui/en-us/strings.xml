<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<!-- This file contains strings that used to be hardcoded in the source.
     It is only for those strings which don't belong in a floater.
     For example, the strings used in avatar chat bubbles, and strings 
     that are returned from one component and may appear in many places-->
<strings>
	
	<!-- Login -->
	<string name="LoginInProgress">Logging in. [APP_NAME] may appear frozen.  Please wait.</string>
	<string name="LoginAuthenticating">Authenticating</string>
	<string name="LoginMaintenance">Performing account maintenance...</string>
	<string name="LoginAttempt">Previous login attempt failed. Logging in, attempt [NUMBER]</string>
	<string name="LoginPrecaching">Loading world...</string>
	<string name="LoginInitializingBrowser">Initializing embedded web browser...</string>
	<string name="LoginInitializingMultimedia">Initializing multimedia...</string>
	<string name="LoginVerifyingCache">Verifying cache files (can take 60-90 seconds)...</string>
	<string name="LoginProcessingResponse">Processing Response...</string>
	<string name="LoginInitializingWorld">Initializing World...</string>
	<string name="LoginDecodingImages">Decoding images...</string>
	<string name="LoginInitializingQuicktime">Initializing QuickTime...</string>
	<string name="LoginQuicktimeNotFound">QuickTime not found - unable to initialize.</string>
	<string name="LoginQuicktimeOK">QuickTime initialized successfully.</string>
	<string name="LoginWaitingForRegionHandshake">Waiting for region handshake...</string>
	<string name="LoginConnectingToRegion">Connecting to region...</string>
	<string name="LoginDownloadingClothing">Downloading clothing...</string>
 	<string name="LoginFailedNoNetwork">Network Error: Could not establish connection, please check your network connection.</string>


	<!-- Disconnection -->
	<string name="AgentLostConnection">This region may be experiencing trouble.  Please check your connection to the Internet.</string>
	
	
	<!-- Tooltip, llhoverview.cpp -->
	<string name="TooltipPerson">Person</string><!-- Object under mouse pointer is an avatar -->
	<string name="TooltipNoName">(no name)</string> <!-- No name on an object -->
	<string name="TooltipOwner">Owner:</string> <!-- Owner name follows -->
	<string name="TooltipPublic">Public</string> <!-- Public permissions on an object -->
	<string name="TooltipIsGroup">(Group)</string> <!-- The name before this text is that of a group -->
	<string name="TooltipFlagScript">Script</string>
	<string name="TooltipFlagPhysics">Physics</string>
	<string name="TooltipFlagTouch">Touch</string>
	<string name="TooltipFlagL$">L$</string>
	<string name="TooltipFlagDropInventory">Drop Inventory</string>
	<string name="TooltipFlagPhantom">Phantom</string>
	<string name="TooltipFlagTemporary">Temporary</string>
	<string name="TooltipFlagRightClickMenu">(Right-click for menu)</string>
	<string name="TooltipFreeToCopy">Free to copy</string>
	<string name="TooltipForSaleL$">For Sale: L$[AMOUNT]</string> <!-- L$ version -->
	<string name="TooltipForSaleMsg">For Sale: [MESSAGE]</string> <!-- Message (RetrievingData) -->
	<string name="TooltipFlagGroupBuild">Group Build</string>
	<string name="TooltipFlagNoBuild">No Build</string>
	<string name="TooltipFlagNoEdit">Group Build</string>
	<string name="TooltipFlagNotSafe">Not Safe</string><!-- damage area -->
	<string name="TooltipFlagNoFly">No Fly</string>
	<string name="TooltipFlagGroupScripts">Group Scripts</string>
	<string name="TooltipFlagNoScripts">No Scripts</string>
	<string name="TooltipLand">Land:</string>
	<string name="TooltipMustSingleDrop">Only a single item can be dragged here</string>	

	
	<!-- Indicates that an avatar's name or other similar datum is being retrieved. General usage. -->
	<string name="RetrievingData">Retrieving...</string>

	<string name="ReleaseNotes">Release Notes</string>

	<!-- Indicates something is being loaded. Maybe should be merged with RetrievingData -->
	<string name="LoadingData">Loading...</string>
	
	
	<!-- namecache -->
	<!-- Avatar name: text shown for LLUUID::null -->
	<string name="AvatarNameNobody">(nobody)</string>
	
	<!-- Avatar name: text shown while fetching name -->
	<string name="AvatarNameWaiting">(waiting)</string>

	<!-- Avatar name: text shown as an alternative to AvatarNameFetching, easter egg. -->
	<string name="AvatarNameHippos">(hippos)</string>
	
	<!-- Group name: text shown for LLUUID::null -->
	<string name="GroupNameNone">(none)</string>
	
	<!-- Asset errors. Used in llassetstorage.cpp, translation from error code to error message. -->
	<string name="AssetErrorNone">No error</string>
	<string name="AssetErrorRequestFailed">Asset request: failed</string>
	<string name="AssetErrorNonexistentFile">Asset request: non-existent file</string>
	<string name="AssetErrorNotInDatabase">Asset request: asset not found in database</string>
	<string name="AssetErrorEOF">End of file</string>
	<string name="AssetErrorCannotOpenFile">Cannot open file</string>
	<string name="AssetErrorFileNotFound">File not found</string>
	<string name="AssetErrorTCPTimeout">File transfer timeout</string>
	<string name="AssetErrorCircuitGone">Circuit gone</string>
	<string name="AssetErrorPriceMismatch">Viewer and server do not agree on price</string>
	<string name="AssetErrorUnknownStatus">Unknown status</string>
	
	<!-- llvoavatar. Displayed in the avatar's chat bubble -->
	<string name="AvatarEditingApparance">(Editing Appearance)</string>
	<string name="AvatarAway">Away</string>
	<string name="AvatarBusy">Busy</string>
	<string name="AvatarMuted">Muted</string>

	<!-- animations -->
	<string name="anim_express_afraid">Afraid</string>
	<string name="anim_express_anger">Angry</string>
	<string name="anim_away">Away</string>
	<string name="anim_backflip">Backflip</string>
	<string name="anim_express_laugh">Belly Laugh</string>
	<string name="anim_express_toothsmile">BigSmile</string>
	<string name="anim_blowkiss">Blow Kiss</string>
	<string name="anim_express_bored">Bored</string>
	<string name="anim_bow">Bow</string>
	<string name="anim_clap">Clap</string>
	<string name="anim_courtbow">Court Bow</string>
	<string name="anim_express_cry">Cry</string>
	<string name="anim_dance1">Dance 1</string>
	<string name="anim_dance2">Dance 2</string>
	<string name="anim_dance3">Dance 3</string>
	<string name="anim_dance4">Dance 4</string>
	<string name="anim_dance5">Dance 5</string>
	<string name="anim_dance6">Dance 6</string>
	<string name="anim_dance7">Dance 7</string>
	<string name="anim_dance8">Dance 8</string>
	<string name="anim_express_disdain">Disdain</string>
	<string name="anim_drink">Drink</string>
	<string name="anim_express_embarrased">Embarrassed</string>
	<string name="anim_angry_fingerwag">Finger Wag</string>
	<string name="anim_fist_pump">Fist Pump</string>
	<string name="anim_yoga_float">Floating Yoga</string>
	<string name="anim_express_frown">Frown</string>
	<string name="anim_impatient">Impatient</string>
	<string name="anim_jumpforjoy">Jump For Joy</string>
	<string name="anim_kissmybutt">Kiss My Butt</string>
	<string name="anim_express_kiss">Kiss</string>
	<string name="anim_laugh_short">Laugh</string>
	<string name="anim_musclebeach">Muscle Beach</string>
	<string name="anim_no_unhappy">No (Unhappy)</string>
	<string name="anim_no_head">No</string>
	<string name="anim_nyanya">Nya-nya-nya</string>
	<string name="anim_punch_onetwo">One-Two Punch</string>
	<string name="anim_express_open_mouth">Open Mouth</string>
	<string name="anim_peace">Peace</string>
	<string name="anim_point_you">Point at Other</string>
	<string name="anim_point_me">Point at Self</string>
	<string name="anim_punch_l">Punch Left</string>
	<string name="anim_punch_r">Punch Right</string>
	<string name="anim_rps_countdown">RPS count</string>
	<string name="anim_rps_paper">RPS paper</string>
	<string name="anim_rps_rock">RPS rock</string>
	<string name="anim_rps_scissors">RPS scissors</string>
	<string name="anim_express_repulsed">Repulsed</string>
	<string name="anim_kick_roundhouse_r">Roundhouse Kick</string>
	<string name="anim_express_sad">Sad</string>
	<string name="anim_salute">Salute</string>
	<string name="anim_shout">Shout</string>
	<string name="anim_express_shrug">Shrug</string>
	<string name="anim_express_smile">Smile</string>
	<string name="anim_smoke_idle">Smoke Idle</string>
	<string name="anim_smoke_inhale">Smoke Inhale</string>
	<string name="anim_smoke_throw_down">Smoke Throw Down</string>
	<string name="anim_express_surprise">Surprise</string>
	<string name="anim_sword_strike_r">Sword Strike</string>
	<string name="anim_angry_tantrum">Tantrum</string>
	<string name="anim_express_tongue_out">TongueOut</string>
	<string name="anim_hello">Wave</string>
	<string name="anim_whisper">Whisper</string>
	<string name="anim_whistle">Whistle</string>
	<string name="anim_express_wink">Wink</string>
	<string name="anim_wink_hollywood">Wink (Hollywood)</string>
	<string name="anim_express_worry">Worry</string>
	<string name="anim_yes_happy">Yes (Happy)</string>
	<string name="anim_yes_head">Yes</string>
	
	<string name="texture_loading">Loading...</string>
	<string name="worldmap_offline">Offline</string>
	
	<!-- Chat -->
	<string name="whisper">whispers:</string>
	<string name="shout">shouts:</string>
	
	<!-- Sim Access labels -->
	<string name="SIM_ACCESS_PG">PG</string>
	<string name="SIM_ACCESS_MATURE">Mature</string>
	<string name="SIM_ACCESS_ADULT">Adult</string>
	<string name="SIM_ACCESS_DOWN">Offline</string>
	<string name="SIM_ACCESS_MIN">Unknown</string>
	
	<!-- For use when we do not have land type back from the server -->
	<string name="land_type_unknown">(unknown)</string>
	
	<!-- Covenant info -->
	<string name="covenant_never_modified">Last Modified: (never)</string>
	<string name="covenant_modified">Last Modified: </string>

	<!-- File load/save dialogs -->
	<string name="all_files">All Files</string>
	<string name="sound_files">Sounds</string>
	<string name="animation_files">Animations</string>
	<string name="image_files">Images</string>
	<string name="save_file_verb">Save</string>
	<string name="load_file_verb">Load</string>
	<string name="targa_image_files">Targa Images</string>
	<string name="bitmap_image_files">Bitmap Images</string>
	<string name="avi_movie_file">AVI Movie File</string>
	<string name="xaf_animation_file">XAF Anim File</string>
	<string name="xml_file">XML File</string>
	<string name="raw_file">RAW File</string>
	<string name="compressed_image_files">Compressed Images</string>
	<string name="load_files">Load Files</string>
	<string name="choose_the_directory">Choose Directory</string>
	
	<!-- LSL Usage Hover Tips -->
  <string name="LSLTipSleepTime">
Sleeps script for [SLEEP_TIME] seconds.
  </string>

  <string name="LSLTipText_llSin">
float llSin(float theta)
Returns the sine of theta (theta in radians)
  </string>
  <string name="LSLTipText_llCos">
float llCos(float theta)
Returns the cosine of theta (theta in radians)
  </string>
  <string name="LSLTipText_llTan">
float llTan(float theta)
Returns the tangent of theta (theta in radians)
  </string>
  <string name="LSLTipText_llAtan2">
float llAtan2(float y, float x)
Returns the arctangent2 of y, x
  </string>
  <string name="LSLTipText_llSqrt">
float llSqrt(float val)
Returns the square root of val, or returns 0 and triggers a Math Error for imaginary results
  </string>
  <string name="LSLTipText_llPow">
float llPow(float base, float exponent)
Returns the base raised to the power exponent, or returns 0 and triggers Math Error for imaginary results
  </string>
  <string name="LSLTipText_llAbs">
integer llAbs(integer val)
Returns the positive version of val
  </string>
  <string name="LSLTipText_llFabs">
float llFabs(float val)
Returns the positive version of val
  </string>
  <string name="LSLTipText_llFrand">
float llFrand(float mag)
Returns a pseudo random number in the range [0,mag) or (mag,0]
  </string>
  <string name="LSLTipText_llFloor">
integer llFloor(float val)
Returns largest integer value &lt;= val
  </string>
  <string name="LSLTipText_llCeil">
integer llCeil(float val)
Returns smallest integer value &gt;= val
  </string>
  <string name="LSLTipText_llRound">
integer llRound(float val)
Returns val rounded to the nearest integer
  </string>
  <string name="LSLTipText_llVecMag">
float llVecMag(vector v)
Returns the magnitude of v
  </string>
  <string name="LSLTipText_llVecNorm">
vector llVecNorm(vector v)
Returns the v normalized
  </string>
  <string name="LSLTipText_llVecDist">
float llVecDist(vector v1, vector v2)
Returns the 3D distance between v1 and v2
  </string>
  <string name="LSLTipText_llRot2Euler">
vector llRot2Euler(rotation q)
Returns the Euler representation (roll, pitch, yaw) of q
  </string>
  <string name="LSLTipText_llEuler2Rot">
rotation llEuler2Rot(vector v)
Returns the rotation representation of Euler Angles v
  </string>
  <string name="LSLTipText_llAxes2Rot">
rotation llAxes2Rot(vector fwd, vector left, vector up)
Returns the rotation defined by the coordinate axes
  </string>
  <string name="LSLTipText_llRot2Fwd">
vector llRot2Fwd(rotation q)
Returns the forward vector defined by q
  </string>
  <string name="LSLTipText_llRot2Left">
vector llRot2Left(rotation q)
Returns the left vector defined by q
  </string>
  <string name="LSLTipText_llRot2Up">
vector llRot2Up(rotation q)
Returns the up vector defined by q
  </string>
  <string name="LSLTipText_llRotBetween">
rotation llRotBetween(vector v1, vector v2)
Returns the rotation to rotate v1 to v2
  </string>
  <string name="LSLTipText_llWhisper">
llWhisper(integer channel, string msg)
Whispers the text of msg on channel
  </string>
  <string name="LSLTipText_llSay">
llSay(integer channel, string msg)
Says the text of msg on channel
  </string>
  <string name="LSLTipText_llShout">
llShout(integer channel, string msg)
Shouts the text of msg on channel
  </string>
  <string name="LSLTipText_llListen">
integer llListen(integer channel, string name, key id, string msg)
Sets a callback for msg on channel from name and id (name, id, and/or msg can be empty) and returns an identifier that can be used to deactivate or remove the listen
  </string>
  <string name="LSLTipText_llListenControl">
llListenControl(integer number, integer active)
Makes a listen event callback active or inactive
  </string>
  <string name="LSLTipText_llListenRemove">
llListenRemove(integer number)
Removes listen event callback number
  </string>
  <string name="LSLTipText_llSensor">
llSensor(string name, key id, integer type, float range, float arc)
Performs a single scan for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0)
  </string>
  <string name="LSLTipText_llSensorRepeat">
llSensorRepeat(string name, key id, integer type, float range, float arc, float rate)
Sets a callback for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0) and repeats every rate seconds
  </string>
  <string name="LSLTipText_llSensorRemove">
llSensorRemove()
Removes the sensor setup by llSensorRepeat
  </string>
  <string name="LSLTipText_llDetectedName">
string llDetectedName(integer number)
Returns the name of detected object number (returns empty string if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedKey">
key llDetectedKey(integer number)
Returns the key of detected object number (returns empty key if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedOwner">
key llDetectedOwner(integer number)
Returns the key of detected object&apos;s owner (returns empty key if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedType">
integer llDetectedType(integer number)
Returns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object (returns 0 if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedPos">
vector llDetectedPos(integer number)
Returns the position of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedVel">
vector llDetectedVel(integer number)
Returns the velocity of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedGrab">
vector llDetectedGrab(integer number)
Returns the grab offset of the user touching object (returns &lt;0,0,0&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedRot">
rotation llDetectedRot(integer number)
Returns the rotation of detected object number (returns &lt;0,0,0,1&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedGroup">
integer llDetectedGroup(integer number)
Returns an integer that is a boolean representing if the detected object or avatar is in the same group 
that the prim containing the script is set to
  </string>
  <string name="LSLTipText_llDetectedLinkNumber">
integer llDetectedLinkNumber(integer number)
Returns the link position of the triggered event for touches and collisions only
  </string>
  <string name="LSLTipText_llDie">
llDie()
Deletes the object
  </string>
  <string name="LSLTipText_llGround">
float llGround(vector offset)
Returns the ground height below the object position + offset
  </string>
  <string name="LSLTipText_llCloud">
float llCloud(vector offset)
Returns the cloud density at the object position + offset
  </string>
  <string name="LSLTipText_llWind">
vector llWind(vector offset)
Returns the wind velocity at the object position + offset
  </string>
  <string name="LSLTipText_llSetStatus">
llSetStatus(integer status, integer value)
Sets status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z) to value
  </string>
  <string name="LSLTipText_llGetStatus">
integer llGetStatus(integer status)
Returns value of status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z)
  </string>
  <string name="LSLTipText_llSetScale">
llSetScale(vector scale)
Sets the scale of the prim
  </string>
  <string name="LSLTipText_llGetScale">
vector llGetScale()
Returns the scale of the prim
  </string>
  <string name="LSLTipText_llSetColor">
llSetColor(vector color, integer face)
Sets the color on face of the prim
  </string>
  <string name="LSLTipText_llGetAlpha">
float llGetAlpha(integer face)
Returns the alpha of face
  </string>
  <string name="LSLTipText_llSetAlpha">
llSetAlpha(float alpha, integer face)
Sets the alpha on face
  </string>
  <string name="LSLTipText_llGetColor">
vector llGetColor(integer face)
Returns the color on face
  </string>
  <string name="LSLTipText_llSetTexture">
llSetTexture(string texture, integer face)
Sets the texture of face or ALL_SIDES
  </string>
  <string name="LSLTipText_llScaleTexture">
llScaleTexture(float u, float v, integer face)
Sets the texture u &amp; v scales for the chosen face or ALL_SIDES
  </string>
  <string name="LSLTipText_llOffsetTexture">
llOffsetTexture(float u, float v, integer face)
Sets the texture u &amp; v offsets for the chosen face or ALL_SIDES
  </string>
  <string name="LSLTipText_llRotateTexture">
llRotateTexture(float rotation, integer face)
Sets the texture rotation for the chosen face
  </string>
  <string name="LSLTipText_llGetTexture">
string llGetTexture(integer face)
Returns a string that is the texture on face (the inventory name if it is a texture in the prim&apos;s inventory, otherwise the key)
  </string>
  <string name="LSLTipText_llSetPos">
llSetPos(vector pos)
Moves the object or prim towards pos without using physics (if the script isn&apos;t physical)
  </string>
  <string name="LSLTipText_llGetPos">
vector llGetPos()
Returns the position of the task in region coordinates
  </string>
  <string name="LSLTipText_llGetLocalPos">
vector llGetLocalPos()
Returns the position relative to the root
  </string>
  <string name="LSLTipText_llSetRot">
llSetRot(rotation rot)
Sets the rotation
  </string>
  <string name="LSLTipText_llGetRot">
rotation llGetRot()
Returns the rotation relative to the region&apos;s axes
  </string>
  <string name="LSLTipText_llGetLocalRot">
rotation llGetLocalRot()
Returns the rotation local to the root
  </string>
  <string name="LSLTipText_llSetForce">
llSetForce(vector force, integer local)
Applies force to the object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llGetForce">
vector llGetForce()
Returns the force (if the script is physical)
  </string>
  <string name="LSLTipText_llTarget">
integer llTarget(vector position, float range)
Sets positions within range of position as a target and return an ID for the target
  </string>
  <string name="LSLTipText_llTargetRemove">
llTargetRemove(integer number)
Removes positional target number registered with llTarget
  </string>
  <string name="LSLTipText_llRotTarget">
integer llRotTarget(rotation rot, float error)
Set rotations with error of rot as a rotational target and return an ID for the rotational target
  </string>
  <string name="LSLTipText_llRotTargetRemove">
llRotTargetRemove(integer number)
Removes rotational target number registered with llRotTarget
  </string>
  <string name="LSLTipText_llMoveToTarget">
llMoveToTarget(vector target, float tau)
Critically damps to target in tau seconds (if the script is physical)
  </string>
  <string name="LSLTipText_llStopMoveToTarget">
llStopMoveToTarget()
Stops critically damped motion
  </string>
  <string name="LSLTipText_llApplyImpulse">
llApplyImpulse(vector force, integer local)
Applies impulse to object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llApplyRotationalImpulse">
llApplyRotationalImpulse(vector force, integer local)
Applies rotational impulse to object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llSetTorque">
llSetTorque(vector torque, integer local)
Sets the torque of object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llGetTorque">
vector llGetTorque()
Returns the torque (if the script is physical)
  </string>
  <string name="LSLTipText_llSetForceAndTorque">
llSetForceAndTorque(vector force, vector torque, integer local)
Sets the force and torque of object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llGetVel">
vector llGetVel()
Returns the velocity of the object
  </string>
  <string name="LSLTipText_llGetAccel">
vector llGetAccel()
Returns the acceleration of the object relative to the region&apos;s axes
  </string>
  <string name="LSLTipText_llGetOmega">
vector llGetOmega()
Returns the rotation velocity in radians per second
  </string>
  <string name="LSLTipText_llGetTimeOfDay">
float llGetTimeOfDay()
Returns the time in seconds since [SECOND_LIFE] server midnight or since region up-time, whichever is smaller
  </string>
  <string name="LSLTipText_llGetWallclock">
float llGetWallclock()
Returns the time in seconds since midnight California Pacific time (PST/PDT)
  </string>
  <string name="LSLTipText_llGetTime">
float llGetTime()
Returns the time in seconds since the last region reset, script reset, or call to either llResetTime or llGetAndResetTime
  </string>
  <string name="LSLTipText_llResetTime">
llResetTime()
Sets the script timer to zero
  </string>
  <string name="LSLTipText_llGetAndResetTime">
float llGetAndResetTime()
Returns the script time in seconds and then resets the script timer to zero
  </string>
  <string name="LSLTipText_llSound">
llSound(string sound, float volume, integer queue, integer loop)
Plays sound at volume and whether it should loop or not
  </string>
  <string name="LSLTipText_llPlaySound">
llPlaySound(string sound, float volume)
Plays attached sound once at volume (0.0 - 1.0)
  </string>
  <string name="LSLTipText_llLoopSound">
llLoopSound(string sound, float volume)
Plays attached sound looping indefinitely at volume (0.0 - 1.0)
  </string>
  <string name="LSLTipText_llLoopSoundMaster">
llLoopSoundMaster(string sound, float volume)
Plays attached sound looping at volume (0.0 - 1.0), declares it a sync master
  </string>
  <string name="LSLTipText_llLoopSoundSlave">
llLoopSoundSlave(string sound, float volume)
Plays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master
  </string>
  <string name="LSLTipText_llPlaySoundSlave">
llPlaySoundSlave(string sound, float volume)
Plays attached sound once at volume (0.0 - 1.0), synced to next loop of most audible sync master
  </string>
  <string name="LSLTipText_llTriggerSound">
llTriggerSound(string sound, float volume)
Plays sound at volume (0.0 - 1.0), centered at but not attached to object
  </string>
  <string name="LSLTipText_llStopSound">
llStopSound()
Stops currently attached sound
  </string>
  <string name="LSLTipText_llPreloadSound">
llPreloadSound(string sound)
Preloads a sound on viewers within range
  </string>
  <string name="LSLTipText_llGetSubString">
string llGetSubString(string src, integer start, integer end)
Returns the indicated substring
  </string>
  <string name="LSLTipText_llDeleteSubString">
string llDeleteSubString(string src, integer start, integer end)
Removes the indicated substring and returns the result
  </string>
  <string name="LSLTipText_llInsertString">
string llInsertString(string dst, integer position, string src)
Returns a destination string dst with the string src inserted starting at position pos
  </string>
  <string name="LSLTipText_llToUpper">
string llToUpper(string src)
Returns a string that is src with all upper-case characters
  </string>
  <string name="LSLTipText_llToLower">
string llToLower(string src)
Returns a string that is src with all lower-case characters
  </string>
  <string name="LSLTipText_llGiveMoney">
llGiveMoney(key destination, integer amount)
Transfers amount of L$ from script owner to destination
  </string>
  <string name="LSLTipText_llMakeExplosion">
llMakeExplosion(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes a round explosion of particles
  </string>
  <string name="LSLTipText_llMakeFountain">
llMakeFountain(integer particles, float scale, float vel, float lifetime, float arc, integer bounce, string texture, vector offset, float bounce_offset)
Makes a fountain of particles
  </string>
  <string name="LSLTipText_llMakeSmoke">
llMakeSmoke(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes smoke like particles
  </string>
  <string name="LSLTipText_llMakeFire">
llMakeFire(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes fire like particles
  </string>
  <string name="LSLTipText_llRezObject">
llRezObject(string inventory, vector pos, vector vel, rotation rot, integer param)
Instantiates owner&apos;s inventory object at pos with velocity vel and rotation rot with start parameter param
  </string>
  <string name="LSLTipText_llLookAt">
llLookAt(vector target, float strength, float damping)
Causes object to point its up axis (positive z) towards target, while keeping its forward axis (positive x) below the horizon
  </string>
  <string name="LSLTipText_llStopLookAt">
llStopLookAt()
Stops causing object to point at a target
  </string>
  <string name="LSLTipText_llSetTimerEvent">
llSetTimerEvent(float sec)
Causes the timer event to be triggered a maximum of once every sec seconds
  </string>
  <string name="LSLTipText_llSleep">
llSleep(float sec)
Puts the script to sleep for sec seconds
  </string>
  <string name="LSLTipText_llGetMass">
float llGetMass()
Returns the mass of object that the script is attached to
  </string>
  <string name="LSLTipText_llCollisionFilter">
llCollisionFilter(string name, key id, integer accept)
Sets the collision filter, exclusively or inclusively. If accept == TRUE, only accept collisions with objects name and id (either is optional), otherwise with objects not name or id
  </string>
  <string name="LSLTipText_llTakeControls">
llTakeControls(integer controls, integer accept, integer pass_on)
Allows for intercepting keyboard and mouse clicks from the agent the script has permissions for
  </string>
  <string name="LSLTipText_llReleaseControls">
llReleaseControls()
Stops taking inputs that were taken with llTakeControls
  </string>
  <string name="LSLTipText_llAttachToAvatar">
llAttachToAvatar(integer attach_point)
Attaches the object to the avatar who has granted permission to the script
  </string>
  <string name="LSLTipText_llDetachFromAvatar">
llDetachFromAvatar()
Detaches object from avatar
  </string>
  <string name="LSLTipText_llTakeCamera">
llTakeCamera(key avatar)
Moves avatar&apos;s viewpoint to task
  </string>
  <string name="LSLTipText_llReleaseCamera">
llReleaseCamera(key avatar)
Returns camera to agent avatar
  </string>
  <string name="LSLTipText_llGetOwner">
key llGetOwner()
Returns the object owner&apos;s UUID
  </string>
  <string name="LSLTipText_llInstantMessage">
llInstantMessage(key user, string message)
Sends the specified string as an Instant Message to the user
  </string>
  <string name="LSLTipText_llEmail">
llEmail(string address, string subject, string message)
Sends an email to address with the subject and message
  </string>
  <string name="LSLTipText_llGetNextEmail">
llGetNextEmail(string address, string subject)
Gets the next waiting email that comes from address, with specified subject
  </string>
  <string name="LSLTipText_llGetKey">
key llGetKey()
Returns the key of the prim the script is attached to
  </string>
  <string name="LSLTipText_llSetBuoyancy">
llSetBuoyancy(float buoyancy)
Sets the buoyancy of the task or object (0 is disabled, &lt; 1.0 sinks, 1.0 floats, &gt; 1.0 rises)
  </string>
  <string name="LSLTipText_llSetHoverHeight">
llSetHoverHeight(float height, integer water, float tau)
Critically damps to a height above the ground (or water) in tau seconds
  </string>
  <string name="LSLTipText_llStopHover">
llStopHover()
Stops hovering to a height
  </string>
  <string name="LSLTipText_llMinEventDelay">
llMinEventDelay(float delay)
Sets the minimum time between events being handled
  </string>
  <string name="LSLTipText_llSoundPreload">
llSoundPreload(string sound)
Preloads a sound on viewers within range
  </string>
  <string name="LSLTipText_llRotLookAt">
llRotLookAt(rotation target, float strength, float damping)
Causes object to point its forward axis towards target
  </string>
  <string name="LSLTipText_llStringLength">
integer llStringLength(string str)
Returns the length of string
  </string>
  <string name="LSLTipText_llStartAnimation">
llStartAnimation(string anim)
Starts animation anim for agent that granted PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked
  </string>
  <string name="LSLTipText_llStopAnimation">
llStopAnimation(string anim)
Stops animation anim for agent that granted permission
  </string>
  <string name="LSLTipText_llPointAt">
llPointAt(vector pos)
Makes agent that owns object point at pos
  </string>
  <string name="LSLTipText_llStopPointAt">
llStopPointAt()
Stops pointing agent that owns object
  </string>
  <string name="LSLTipText_llTargetOmega">
llTargetOmega(vector axis, float spinrate, float gain)
Rotates the object around axis at spinrate with strength gain
  </string>
  <string name="LSLTipText_llGetStartParameter">
integer llGetStartParameter()
Returns an integer that is the script start/rez parameter
  </string>
  <string name="LSLTipText_llGodLikeRezObject">
llGodLikeRezObject(key inventory, vector pos)
Rezzes directly off of UUID if owner is in God Mode
  </string>
  <string name="LSLTipText_llRequestPermissions">
llRequestPermissions(key agent, integer perm)
Asks the agent for permission to run certain classes of functions
  </string>
  <string name="LSLTipText_llGetPermissionsKey">
key llGetPermissionsKey()
Returns the key of the avatar that last granted permissions to the script
  </string>
  <string name="LSLTipText_llGetPermissions">
integer llGetPermissions()
Returns an integer bitfield with the permissions that have been granted
  </string>
  <string name="LSLTipText_llGetLinkNumber">
integer llGetLinkNumber()
Returns the link number of the prim containing the script (0 means not linked, 1 the prim is the root, 2 the prim is the first child, etc)
  </string>
  <string name="LSLTipText_llSetLinkColor">
llSetLinkColor(integer linknumber, vector color, integer face)
Sets face to color if a task exists in the link chain at linknumber
  </string>
  <string name="LSLTipText_llCreateLink">
llCreateLink(key target, integer parent)
Attempts to link the script&apos;s object with the target (requires that PERMISSION_CHANGE_LINKS be granted). If parent == TRUE, then the script&apos;s object becomes the root
  </string>
  <string name="LSLTipText_llBreakLink">
llBreakLink(integer linknum)
Delinks the prim with the given link number in a linked object set (requires that PERMISSION_CHANGE_LINKS be granted)
  </string>
  <string name="LSLTipText_llBreakAllLinks">
llBreakAllLinks()
Delinks all prims in the link set (requires that PERMISSION_CHANGE_LINKS be granted)
  </string>
  <string name="LSLTipText_llGetLinkKey">
key llGetLinkKey(integer linknumber)
Returns the key of the linked prim linknumber
  </string>
  <string name="LSLTipText_llGetLinkName">
string llGetLinkName(integer linknumber)
Returns the name of linknumber in a link set
  </string>
  <string name="LSLTipText_llGetInventoryNumber">
integer llGetInventoryNumber(integer type)
Returns the number of items of a given type (INVENTORY_* flag) in the prim&apos;s inventory
  </string>
  <string name="LSLTipText_llGetInventoryName">
string llGetInventoryName(integer type, integer number)
Returns the name of the inventory item number of a given type
  </string>
  <string name="LSLTipText_llSetScriptState">
llSetScriptState(string name, integer run)
Sets the running state of the specified script
  </string>
  <string name="LSLTipText_llGetEnergy">
float llGetEnergy()
Returns how much energy is in the object as a percentage of maximum
  </string>
  <string name="LSLTipText_llGiveInventory">
llGiveInventory(key destination, string inventory)
Gives inventory to destination
  </string>
  <string name="LSLTipText_llRemoveInventory">
llRemoveInventory(string item)
Removes the named inventory item
  </string>
  <string name="LSLTipText_llSetText">
llSetText(string text, vector color, float alpha)
Displays text that hovers over the prim with specific color and translucency specified with alpha
  </string>
  <string name="LSLTipText_llWater">
float llWater(vector offset)
Returns the water height below the object position + offset
  </string>
  <string name="LSLTipText_llPassTouches">
llPassTouches(integer pass)
If pass == TRUE, touches are passed from children on to parents
  </string>
  <string name="LSLTipText_llRequestAgentData">
key llRequestAgentData(key id, integer data)
Requests data about agent id. When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llRequestInventoryData">
key llRequestInventoryData(string name)
Requests data from object&apos;s inventory object. When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llSetDamage">
llSetDamage(float damage)
Sets the amount of damage that will be done when this object hits an avatar.
  </string>
  <string name="LSLTipText_llTeleportAgentHome">
llTeleportAgentHome(key id)
Teleports avatar on the owner&apos;s land to their home location without any warning
  </string>
  <string name="LSLTipText_llModifyLand">
llModifyLand(integer action, integer brush)
Modifies land using the specified action on the specified brush size of land
  </string>
  <string name="LSLTipText_llCollisionSound">
llCollisionSound(string impact_sound, float impact_volume)
Suppresses default collision sounds, replaces default impact sounds with impact_sound at the volume impact_volume
  </string>
  <string name="LSLTipText_llCollisionSprite">
llCollisionSprite(string impact_sprite)
Suppresses default collision sprites, replaces default impact sprite with impact_sprite (use an empty string to just suppress)
  </string>
  <string name="LSLTipText_llGetAnimation">
string llGetAnimation(key id)
Returns the name of the currently playing locomotion animation for avatar id
  </string>
  <string name="LSLTipText_llResetScript">
llResetScript()
Resets the script
  </string>
  <string name="LSLTipText_llMessageLinked">
llMessageLinked(integer linknum, integer num, string str, key id)
Allows scripts in the same object to communicate. Triggers a link_message event with the same parameters num, str, and id in all scripts in the prim(s) described by linknum.
  </string>
  <string name="LSLTipText_llPushObject">
llPushObject(key id, vector impulse, vector ang_impulse, integer local)
Applies impulse and ang_impulse to object id
  </string>
  <string name="LSLTipText_llPassCollisions">
llPassCollisions(integer pass)
If pass == TRUE, collisions are passed from children on to parents (default is FALSE)
  </string>
  <string name="LSLTipText_llGetScriptName">
string llGetScriptName()
Returns the name of the script that this function is used in
  </string>
  <string name="LSLTipText_llGetNumberOfSides">
integer llGetNumberOfSides()
Returns the number of faces (or sides) of the prim
  </string>
  <string name="LSLTipText_llAxisAngle2Rot">
rotation llAxisAngle2Rot(vector axis, float angle)
Returns the rotation that is a generated angle about axis
  </string>
  <string name="LSLTipText_llRot2Axis">
vector llRot2Axis(rotation rot)
Returns the rotation axis represented by rot
  </string>
  <string name="LSLTipText_llRot2Angle">
float llRot2Angle(rotation rot)
Returns the rotation angle represented by rot
  </string>
  <string name="LSLTipText_llAcos">
float llAcos(float val)
Returns the arccosine in radians of val
  </string>
  <string name="LSLTipText_llAsin">
float llAsin(float val)
Returns the arcsine in radians of val
  </string>
  <string name="LSLTipText_llAngleBetween">
float llAngleBetween(rotation a, rotation b)
Returns angle between rotation a and b
  </string>
  <string name="LSLTipText_llGetInventoryKey">
key llGetInventoryKey(string name)
Returns the key that is the UUID of the inventory name
  </string>
  <string name="LSLTipText_llAllowInventoryDrop">
llAllowInventoryDrop(integer add)
If add == TRUE, users without modify permissions can still drop inventory items onto a prim
  </string>
  <string name="LSLTipText_llGetSunDirection">
vector llGetSunDirection()
Returns a normalized vector of the direction of the sun in the region
  </string>
  <string name="LSLTipText_llGetTextureOffset">
vector llGetTextureOffset(integer face)
Returns the texture offset of face in the x and y components of a vector
  </string>
  <string name="LSLTipText_llGetTextureScale">
vector llGetTextureScale(integer side)
Returns the texture scale of side in the x and y components of a vector
  </string>
  <string name="LSLTipText_llGetTextureRot">
float llGetTextureRot(integer side)
Returns the texture rotation of side
  </string>
  <string name="LSLTipText_llSubStringIndex">
integer llSubStringIndex(string source, string pattern)
Returns an integer that is the index in source where pattern first appears.
(Returns -1 if not found)
  </string>
  <string name="LSLTipText_llGetOwnerKey">
key llGetOwnerKey(key id)
Returns the owner of object id
  </string>
  <string name="LSLTipText_llGetCenterOfMass">
vector llGetCenterOfMass()
Returns the prim&apos;s center of mass (unless called from the root prim, where it returns the object&apos;s center of mass)
  </string>
  <string name="LSLTipText_llListSort">
list llListSort(list src, integer stride, integer ascending)
Sorts the list into blocks of stride, in ascending order if ascending == TRUE.
The sort order is affected by type.
  </string>
  <string name="LSLTipText_llGetListLength">
integer llGetListLength(list src)
Returns the number of elements in the list
  </string>
  <string name="LSLTipText_llList2Integer">
integer llList2Integer(list src, integer index)
Copies the integer at index in the list
  </string>
  <string name="LSLTipText_llList2Float">
float llList2Float(list src, integer index)
Copies the float at index in the list
  </string>
  <string name="LSLTipText_llList2String">
string llList2String(list src, integer index)
Copies the string at index in the list
  </string>
  <string name="LSLTipText_llList2Key">
key llList2Key(list src, integer index)
Copies the key at index in the list
  </string>
  <string name="LSLTipText_llList2Vector">
vector llList2Vector(list src, integer index)
Copies the vector at index in the list
  </string>
  <string name="LSLTipText_llList2Rot">
rotation llList2Rot(list src, integer index)
Copies the rotation at index in the list
  </string>
  <string name="LSLTipText_llList2List">
list llList2List(list src, integer start, integer end)
Copies the slice of the list from start to end
  </string>
  <string name="LSLTipText_llDeleteSubList">
list llDeleteSubList(list src, integer start, integer end)
Removes the slice from start to end and returns the remainder of the list
  </string>
  <string name="LSLTipText_llGetListEntryType">
integer llGetListEntryType(list src, integer index)
Returns the type of the index entry in the list
(TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list)
  </string>
  <string name="LSLTipText_llList2CSV">
string llList2CSV(list src)
Creates a string of comma separated values from list
  </string>
  <string name="LSLTipText_llCSV2List">
list llCSV2List(string src)
Creates a list from a string of comma separated values
  </string>
  <string name="LSLTipText_llListRandomize">
list llListRandomize(list src, integer stride)
Returns a randomized list of blocks of size stride
  </string>
  <string name="LSLTipText_llList2ListStrided">
list llList2ListStrided(list src, integer start, integer end, integer stride)
Copies the strided slice of the list from start to end
  </string>
  <string name="LSLTipText_llGetRegionCorner">
vector llGetRegionCorner()
Returns a vector in meters that is the global location of the south-west corner of the region which the object is in
  </string>
  <string name="LSLTipText_llListInsertList">
list llListInsertList(list dest, list src, integer start)
Returns a list that contains all the elements from dest but with the elements from src inserted at position start
  </string>
  <string name="LSLTipText_llListFindList">
integer llListFindList(list src, list test)
Returns the index of the first instance of test in src.
(Returns -1 if not found)
  </string>
  <string name="LSLTipText_llGetObjectName">
string llGetObjectName()
Returns the name of the prim which the script is attached to
  </string>
  <string name="LSLTipText_llSetObjectName">
llSetObjectName(string name)
Sets the prim&apos;s name to the name parameter
  </string>
  <string name="LSLTipText_llGetDate">
string llGetDate()
Returns the current date in the UTC time zone in the format YYYY-MM-DD
  </string>
  <string name="LSLTipText_llEdgeOfWorld">
integer llEdgeOfWorld(vector pos, vector dir)
Checks to see whether the border hit by dir from pos is the edge of the world (has no neighboring region)
  </string>
  <string name="LSLTipText_llGetAgentInfo">
integer llGetAgentInfo(key id)
Returns an integer bitfield containing the agent information about id.
Returns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING and/or AGENT_IN_AIR.
  </string>
  <string name="LSLTipText_llAdjustSoundVolume">
llAdjustSoundVolume(float volume)
Adjusts volume of attached sound (0.0 - 1.0)
  </string>
  <string name="LSLTipText_llSetSoundQueueing">
llSetSoundQueueing(integer queue)
Sets whether attached sounds wait for the current sound to finish (If queue == TRUE then queuing is enabled, if FALSE queuing is disabled [default])
  </string>
  <string name="LSLTipText_llSetSoundRadius">
llSetSoundRadius(float radius)
Establishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered)
  </string>
  <string name="LSLTipText_llKey2Name">
string llKey2Name(key id)
Returns the name of the prim or avatar specified by id.
(The id must be a valid rezzed prim or avatar key in the current simulator, otherwise an empty string is returned.)
  </string>
  <string name="LSLTipText_llSetTextureAnim">
llSetTextureAnim(integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)
Animates the texture on the specified face/faces
  </string>
  <string name="LSLTipText_llTriggerSoundLimited">
llTriggerSoundLimited(string sound, float volume, vector top_north_east, vector bottom_south_west)
Plays sound at volume (0.0 - 1.0), centered at but not attached to object, limited to the box defined by vectors top_north_east and bottom_south_west
  </string>
  <string name="LSLTipText_llEjectFromLand">
llEjectFromLand(key avatar)
Ejects avatar from the parcel
  </string>
  <string name="LSLTipText_llParseString2List">
list llParseString2List(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers
(separators and spacers must be lists of strings, maximum of 8 each)
  </string>
  <string name="LSLTipText_llOverMyLand">
integer llOverMyLand(key id)
Returns TRUE if id is over land owned by the script owner, otherwise FALSE
  </string>
  <string name="LSLTipText_llGetLandOwnerAt">
key llGetLandOwnerAt(vector pos)
Returns the key of the land owner, returns NULL_KEY if public
  </string>
  <string name="LSLTipText_llGetNotecardLine">
key llGetNotecardLine(string name, integer line)
Returns line line of notecard name via the dataserver event
  </string>
  <string name="LSLTipText_llGetAgentSize">
vector llGetAgentSize(key id)
If the avatar is in the same region, returns the size of the bounding box of the requested avatar by id, otherwise returns ZERO_VECTOR
  </string>
  <string name="LSLTipText_llSameGroup">
integer llSameGroup(key id)
Returns TRUE if avatar id is in the same region and has the same active group, otherwise FALSE
  </string>
  <string name="LSLTipText_llUnSit">
key llUnSit(key id)
If avatar identified by id is sitting on the object the script is attached to or is over land owned by the object&apos;s owner, the avatar is forced to stand up
  </string>
  <string name="LSLTipText_llGroundSlope">
vector llGroundSlope(vector offset)
Returns the ground slope below the object position + offset
  </string>
  <string name="LSLTipText_llGroundNormal">
vector llGroundNormal(vector offset)
Returns the ground normal below the object position + offset
  </string>
  <string name="LSLTipText_llGroundContour">
vector llGroundCountour(vector offset)
Returns the ground contour direction below the object position + offset
  </string>
  <string name="LSLTipText_llGetAttached">
integer llGetAttached()
Returns the object&apos;s attachment point, or 0 if not attached
  </string>
  <string name="LSLTipText_llGetFreeMemory">
integer llGetFreeMemory()
Returns the number of free bytes of memory the script can use
  </string>
  <string name="LSLTipText_llGetRegionName">
string llGetRegionName()
Returns the current region name
  </string>
  <string name="LSLTipText_llGetRegionTimeDilation">
float llGetRegionTimeDilation()
Returns the current time dilation as a float between 0.0 (full dilation) and 1.0 (no dilation)
  </string>
  <string name="LSLTipText_llGetRegionFPS">
float llGetRegionFPS()
Returns the mean region frames per second
  </string>
  <string name="LSLTipText_llParticleSystem">
llParticleSystem(list rules)
Creates a particle system based on rules.  An empty list removes the particle system.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
  </string>
  <string name="LSLTipText_llGroundRepel">
llGroundRepel(float height, integer water, float tau)
Critically damps to height if within height*0.5 of level (either above ground level, or above the higher of land and water if water == TRUE)
  </string>
  <string name="LSLTipText_llGiveInventoryList">
llGiveInventoryList(key target, string folder, list inventory)
Gives inventory items to target, creating a new folder to put them in
  </string>
  <string name="LSLTipText_llSetVehicleType">
llSetVehicleType(integer type)
Sets the vehicle to one of the default types
  </string>
  <string name="LSLTipText_llSetVehicleFloatParam">
llSetVehicleFloatParam(integer param, float value)
Sets the specified vehicle float parameter
  </string>
  <string name="LSLTipText_llSetVehicleVectorParam">
llSetVehicleVectorParam(integer param, vector vec)
Sets the specified vehicle vector parameter
  </string>
  <string name="LSLTipText_llSetVehicleRotationParam">
llSetVehicleVectorParam(integer param, rotation rot)
Sets the specified vehicle rotation parameter
  </string>
  <string name="LSLTipText_llSetVehicleFlags">
llSetVehicleFlags(integer flags)
Sets the enabled bits in &apos;flags&apos;
  </string>
  <string name="LSLTipText_llRemoveVehicleFlags">
llRemoveVehicleFlags(integer flags)
Removes the enabled bits in &apos;flags&apos;
  </string>
  <string name="LSLTipText_llSitTarget">
llSitTarget(vector offset, rotation rot)
Sets the sit location for the prim.  If offset == &lt;0,0,0&gt; then the sit target is removed.
  </string>
  <string name="LSLTipText_llAvatarOnSitTarget">
key llAvatarOnSitTarget()
If an avatar is seated on the sit target, returns the avatar&apos;s key, otherwise NULL_KEY
  </string>
  <string name="LSLTipText_llAddToLandPassList">
llAddToLandPassList(key avatar, float hours)
Adds avatar to the land pass list for hours, or indefinitely if hours is 0
  </string>
  <string name="LSLTipText_llSetTouchText">
llSetTouchText(string text)
Displays text rather than the default &apos;Touch&apos; in the pie menu
  </string>
  <string name="LSLTipText_llSetSitText">
llSetSitText(string text)
Displays text rather than the default &apos;Sit Here&apos; in the pie menu
  </string>
  <string name="LSLTipText_llSetCameraEyeOffset">
llSetCameraEyeOffset(vector offset)
Sets the camera eye offset for avatars that sit on the object
  </string>
  <string name="LSLTipText_llSetCameraAtOffset">
llSetCameraAtOffset(vector offset)
Sets the point the camera is looking at to offset for avatars that sit on the object
  </string>
  <string name="LSLTipText_llDumpList2String">
string llDumpList2String(list src, string separator)
Returns the list in a single string, using separator between the entries
  </string>
  <string name="LSLTipText_llScriptDanger">
integer llScriptDanger(vector pos)
Returns TRUE if pos is over public land, sandbox land, land that doesn&apos;t allow everyone to edit and build, or land that doesn&apos;t allow outside scripts
  </string>
  <string name="LSLTipText_llDialog">
llDialog(key avatar, string message, list buttons, integer chat_channel
Shows a dialog box on the avatar&apos;s screen with a message and up to 12 buttons.
If a button is pressed, the avatar says the text of the button label on chat_channel.
  </string>
  <string name="LSLTipText_llVolumeDetect">
llVolumeDetect(integer detect)
If detect = TRUE, object works much like Phantom, but triggers collision_start and collision_end events when other objects start and stop interpenetrating.
Must be applied to the root prim.
  </string>
  <string name="LSLTipText_llResetOtherScript">
llResetOtherScript(string name)
Resets script name
  </string>
  <string name="LSLTipText_llGetScriptState">
integer llGetScriptState(string name)
Returns TRUE if the script name is running
  </string>
  <string name="LSLTipText_llRemoteLoadScript">
DEPRECATED!  Please use llRemoteLoadScriptPin instead.
  </string>
  <string name="LSLTipText_llSetRemoteScriptAccessPin">
llSetRemoteScriptAccessPin(integer pin)
If pin is set to a non-zero number, allows a prim to have scripts remotely loaded via llRemoteLoadScriptPin when it passes in the correct pin. Otherwise, llRemoteLoadScriptPin is ignored.
  </string>
  <string name="LSLTipText_llRemoteLoadScriptPin">
llRemoteLoadScriptPin(key target, string name, integer pin, integer running, integer start_param)
Copies script name onto target, if the owner of this scripted object can modify target and is in the same region, and the matching pin is used.
If running == TRUE, starts the script with start_param
  </string>
  <string name="LSLTipText_llOpenRemoteDataChannel">
llOpenRemoteDataChannel()
Creates a channel to listen for XML-RPC calls, and will trigger a remote_data event with channel id once it is available
  </string>
  <string name="LSLTipText_llSendRemoteData">
key llSendRemoteData(key channel, string dest, integer idata, string sdata)
Sends an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.
Returns a key that is the message_id for the resulting remote_data events.
  </string>
  <string name="LSLTipText_llRemoteDataReply">
llRemoteDataReply(key channel, key message_id, string sdata, integer idata)
Sends an XML-RPC reply to message_id on channel with payload of string sdata and integer idata
  </string>
  <string name="LSLTipText_llCloseRemoteDataChannel">
llCloseRemoteDataChannel(key channel)
Closes XML-RPC channel
  </string>
  <string name="LSLTipText_llMD5String">
string llMD5String(string src, integer nonce)
Returns a string of 32 hex characters that is a RSA Data Security, Inc. MD5 Message-Digest Algorithm of src with nonce
  </string>
  <string name="LSLTipText_llSetPrimitiveParams">
llSetPrimitiveParams(list rules)
Sets the prim&apos;s parameters according to rules
  </string>
  <string name="LSLTipText_llStringToBase64">
string llStringToBase64(string str)
Converts a string to the Base64 representation of the string
  </string>
  <string name="LSLTipText_llBase64ToString">
string llBase64ToString(string str)
Converts a Base64 string to a conventional string.
If the conversion creates any unprintable characters, they are converted to spaces.
  </string>
  <string name="LSLTipText_llXorBase64Strings">
string llXorBase64Strings(string s1, string s2)
DEPRECATED!  Please use llXorBase64StringsCorrect instead.
Incorrectly performs an exclusive or on two Base64 strings and returns a Base64 string.  s2 repeats if it is shorter than s1.  Retained for backwards compatability.
  </string>
  <string name="LSLTipText_llRemoteDataSetRegion">
llRemoteDataSetRegion()
DEPRECATED!  Please use llOpenRemoteDataChannel instead.
If an object using remote data channels changes regions, you must call this function to reregister the remote data channels. This call is not needed if the prim does not change regions.
  </string>
  <string name="LSLTipText_llLog10">
float llLog10(float val)
Returns the base 10 logarithm of val.  Returns zero if val &lt;= 0.
  </string>
  <string name="LSLTipText_llLog">
float llLog(float val)
Returns the natural logarithm of val.  Returns zero if val &lt;= 0.
  </string>
  <string name="LSLTipText_llGetAnimationList">
list llGetAnimationList(key id)
Returns a list of keys of playing animations for avatar described by id
  </string>
  <string name="LSLTipText_llSetParcelMusicURL">
llSetParcelMusicURL(string url)
Sets the streaming audio URL for the parcel which the object is on
  </string>
  <string name="LSLTipText_llGetRootPosition">
vector llGetRootPosition()
Returns the position (in region coordinates) of the root prim of the object which the script is attached to
  </string>
  <string name="LSLTipText_llGetRootRotation">
rotation llGetRootRotation()
Returns the rotation (relative to the region) of the root prim of the object which the script is attached to
  </string>
  <string name="LSLTipText_llGetObjectDesc">
string llGetObjectDesc()
Returns the description of the prim the script is attached to
  </string>
  <string name="LSLTipText_llSetObjectDesc">
llSetObjectDesc(string name)
Sets the prim&apos;s description
  </string>
  <string name="LSLTipText_llGetCreator">
key llGetCreator()
Returns a key for the creator of the prim
  </string>
  <string name="LSLTipText_llGetTimestamp">
string llGetTimestamp()
Returns the timestamp in the UTC time zone in the format: YYYY-MM-DDThh:mm:ss.ff..fZ
  </string>
  <string name="LSLTipText_llSetLinkAlpha">
llSetLinkAlpha(integer linknumber, float alpha, integer face)
If a prim exists in the link chain at linknumber, sets face to alpha
  </string>
  <string name="LSLTipText_llGetNumberOfPrims">
integer llGetNumberOfPrims()
Returns the number of prims in a link set the script is attached to
  </string>
  <string name="LSLTipText_llGetNumberOfNotecardLines">
key llGetNumberOfNotecardLines(string name)
Returns number of lines in notecard name via the dataserver event (cast return value to integer)
  </string>
  <string name="LSLTipText_llGetBoundingBox">
list llGetBoundingBox(key object)
Returns the bounding box around the object (including any linked prims) relative to its root prim, in a list in the format [ (vector) min_corner, (vector) max_corner ]
  </string>
  <string name="LSLTipText_llGetGeometricCenter">
vector llGetGeometricCenter()
Returns the geometric center of the linked set the script is attached to.
  </string>
  <string name="LSLTipText_llGetPrimitiveParams">
list llGetPrimitiveParams(list params)
Returns the primitive parameters specified in the params list.
  </string>
  <string name="LSLTipText_llIntegerToBase64">
string llIntegerToBase64(integer number)
Returns a string that is a Base64 big endian encode of number
  </string>
  <string name="LSLTipText_llBase64ToInteger">
integer llBase64ToInteger(string str)
Returns an integer that is the str Base64 decoded as a big endian integer
  </string>
  <string name="LSLTipText_llGetGMTclock">
float llGetGMTclock()
Returns the time in seconds since midnight GMT
  </string>
  <string name="LSLTipText_llGetSimulatorHostname">
string llGetSimulatorHostname()
Returns the hostname of the machine which the script is running on (same as string in viewer Help dialog)
  </string>
  <string name="LSLTipText_llSetLocalRot">
llSetLocalRot(rotation rot)
Sets the rotation of a child prim relative to the root prim
  </string>
  <string name="LSLTipText_llParseStringKeepNulls">
list llParseStringKeepNulls(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers, keeping any null values generated.
(separators and spacers must be lists of strings, maximum of 8 each)
  </string>
  <string name="LSLTipText_llRezAtRoot">
llRezAtRoot(string inventory, vector pos, vector vel, rotation rot, integer param)
Instantiates owner&apos;s inventory object rotated to rot with its root at pos, moving at vel, using param as the start parameter
  </string>
  <string name="LSLTipText_llGetObjectPermMask">
integer llGetObjectPermMask(integer mask)
Returns the requested permission mask for the root object the task is attached to
  </string>
  <string name="LSLTipText_llSetObjectPermMask">
llSetObjectPermMask(integer mask, integer value)
Sets the given permission mask to the new value on the root object the task is attached to (requires God Mode)
  </string>
  <string name="LSLTipText_llGetInventoryPermMask">
integer llGetInventoryPermMask(string item, integer mask)
Returns the requested permission mask for the inventory item
  </string>
  <string name="LSLTipText_llSetInventoryPermMask">
llSetInventoryPermMask(string item, integer mask, integer value)
Sets the given permission mask to the new value on the inventory item (requires God Mode)
  </string>
  <string name="LSLTipText_llGetInventoryCreator">
key llGetInventoryCreator(string item)
Returns a key for the creator of the inventory item
  </string>
  <string name="LSLTipText_llOwnerSay">
llOwnerSay(string msg)
Says msg to owner only.  (Owner must be in the same region.)
  </string>
  <string name="LSLTipText_llRequestSimulatorData">
key llRequestSimulatorData(string simulator, integer data)
Requests data about simulator.  When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llForceMouselook">
llForceMouselook(integer mouselook)
If mouselook is TRUE, any avatar that sits upon the prim will be forced into mouselook mode
  </string>
  <string name="LSLTipText_llGetObjectMass">
float llGetObjectMass(key id)
Returns the mass of the avatar or object in the region
  </string>
  <string name="LSLTipText_llListReplaceList">
list llListReplaceList(list dest, list src, integer start, integer end)
Returns a list that is dest with start through end removed and src inserted at start
  </string>
  <string name="LSLTipText_llLoadURL">
llLoadURL(key avatar, string message, string url)
Shows a dialog to avatar offering to load the web page at url with a message.
If user clicks yes, launches the page in their web browser.
  </string>
  <string name="LSLTipText_llParcelMediaCommandList">
llParcelMediaCommandList(list command)
Sends a list of commands, some with arguments, to a parcel to control the playback of movies and other media
  </string>
  <string name="LSLTipText_llParcelMediaQuery">
list llParcelMediaQuery(list query)
Returns a list containing results of the sent query
  </string>
  <string name="LSLTipText_llModPow">
integer llModPow(integer a, integer b, integer c)
Returns a raised to the b power, mod c. ( (a**b)%c )
b is capped at 0xFFFF (16 bits).
  </string>
  <string name="LSLTipText_llGetInventoryType">
integer llGetInventoryType(string name)
Returns the type of the inventory item name
  </string>
  <string name="LSLTipText_llSetPayPrice">
llSetPayPrice(integer price, list quick_pay_buttons)
Sets the default amount on the dialog that appears when someone chooses to pay this prim
  </string>
  <string name="LSLTipText_llGetCameraPos">
vector llGetCameraPos()
Returns the current camera position for the agent the task has permissions for
  </string>
  <string name="LSLTipText_llGetCameraRot">
rotation llGetCameraRot()
Returns the current camera orientation for the agent the task has permissions for
  </string>
  <string name="LSLTipText_llSetPrimURL">
llSetPrimURL(string url)
Updates the URL for the web page shown on the sides of the object
  </string>
  <string name="LSLTipText_llRefreshPrimURL">
llRefreshPrimURL()
Reloads the web page shown on the sides of the object
  </string>
  <string name="LSLTipText_llEscapeURL">
string llEscapeURL(string url)
Returns an escaped/encoded version of url, replacing spaces with %20 etc.
  </string>
  <string name="LSLTipText_llUnescapeURL">
string llUnescapeURL(string url)
Returns an unescaped/ unencoded version of url, replacing %20 with spaces etc.
  </string>
  <string name="LSLTipText_llMapDestination">
llMapDestination(string simname, vector pos, vector look_at)
Opens the World Map centered on the region simname with pos highlighted. (NOTE: look_at currently does nothing.)
Only works for scripts attached to avatar, or during touch events.
  </string>
  <string name="LSLTipText_llAddToLandBanList">
llAddToLandBanList(key avatar, float hours)
Adds avatar to the land ban list for hours, or indefinitely if hours is 0
  </string>
  <string name="LSLTipText_llRemoveFromLandPassList">
llRemoveFromLandPassList(key avatar)
Removes avatar from the land pass list
  </string>
  <string name="LSLTipText_llRemoveFromLandBanList">
llRemoveFromLandBanList(key avatar)
Removes avatar from the land ban list
  </string>
  <string name="LSLTipText_llSetCameraParams">
llSetCameraParams(list rules)
Sets multiple camera parameters at once.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
  </string>
  <string name="LSLTipText_llClearCameraParams">
llClearCameraParams()
Resets all camera parameters to default values and turns off scripted camera control
  </string>
  <string name="LSLTipText_llListStatistics">
float llListStatistics(integer operation, list src)
Performs statistical aggregate functions on list src using LIST_STAT_* operations
  </string>
  <string name="LSLTipText_llGetUnixTime">
integer llGetUnixTime()
Returns the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock
  </string>
  <string name="LSLTipText_llGetParcelFlags">
integer llGetParcelFlags(vector pos)
Returns a mask of the parcel flags (PARCEL_FLAG_*) for the parcel that includes the point pos
  </string>
  <string name="LSLTipText_llGetRegionFlags">
integer llGetRegionFlags()
Returns the region flags (REGION_FLAG_*) for the region the object is in
  </string>
  <string name="LSLTipText_llXorBase64StringsCorrect">
string llXorBase64StringsCorrect(string s1, string s2)
Correctly performs an exclusive or on two Base64 strings and returns a Base64 string.
s2 repeats if it is shorter than s1.
  </string>
  <string name="LSLTipText_llHTTPRequest">
llHTTPRequest(string url, list parameters, string body)
Sends an HTTP request to the specified url with the body of the request and parameters
  </string>
  <string name="LSLTipText_llResetLandBanList">
llResetLandBanList()
Removes all residents from the land ban list
  </string>
  <string name="LSLTipText_llResetLandPassList">
llResetLandPassList()
Removes all residents from the land access/pass list
  </string>
  <string name="LSLTipText_llGetObjectPrimCount">
integer llGetObjectPrimCount(key object_id)
Returns the total number of prims for an object in the region
  </string>
  <string name="LSLTipText_llGetParcelPrimOwners">
list llGetParcelPrimOwners(vector pos)
Returns a list of all residents who own objects on the parcel at pos and with individual prim counts.
Requires owner-like permissions for the parcel.
  </string>
  <string name="LSLTipText_llGetParcelPrimCount">
integer llGetParcelPrimCount(vector pos, integer category, integer sim_wide)
Returns the number of prims on the parcel at pos of the given category.
Categories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP
  </string>
  <string name="LSLTipText_llGetParcelMaxPrims">
integer llGetParcelMaxPrims(vector pos, integer sim_wide)
Returns the maximum number of prims allowed on the parcel at pos
  </string>
  <string name="LSLTipText_llGetParcelDetails">
list llGetParcelDetails(vector pos, list params)
Returns the parcel details specified in params for the parcel at pos.
Params is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA
  </string>
  <string name="LSLTipText_llSetLinkPrimitiveParams">
llSetLinkPrimitiveParams(integer linknumber, list rules)
Sets primitive parameters for linknumber based on rules
  </string>
  <string name="LSLTipText_llSetLinkTexture">
llSetLinkTexture(integer linknumber, string texture, integer face)
Sets the texture of face for a task that exists in the link chain at linknumber
  </string>
  <string name="LSLTipText_llStringTrim">
string llStringTrim(string src, integer trim_type)
Trims the leading and/or trailing white spaces from a string.
trim_type can be STRING_TRIM, STRING_TRIM_HEAD or STRING_TRIM_TAIL.
  </string>
  <string name="LSLTipText_llRegionSay">
llRegionSay(integer channel, string msg)
Broadcasts msg on channel (not 0) that can be heard anywhere in the region by a script listening on channel
  </string>
  <string name="LSLTipText_llGetObjectDetails">
list llGetObjectDetails(key id, list params)
Returns the object details specified in params for the object with key id.
Params are OBJECT_NAME, _DESC, _POS, _ROT, _VELOCITY, _OWNER, _GROUP, _CREATOR
  </string>
  <string name="LSLTipText_llSetClickAction">
llSetClickAction(integer action)
Sets the action performed when a prim is clicked upon
  </string>
  <string name="LSLTipText_llGetRegionAgentCount">
integer llGetRegionAgentCount()
Returns the number of avatars in the region
  </string>
  <string name="LSLTipText_llTextBox">
llTextBox(key avatar, string message, integer chat_channel
Shows a dialog box on the avatar&apos;s screen with the message.
It contains a text box for input, and if entered that text is chatted on chat_channel.
  </string>
  <string name="LSLTipText_llGetAgentLanguage">
string llGetAgentLanguage(key avatar)
Returns the language code of the preferred interface language of the avatar
  </string>
  <string name="LSLTipText_llDetectedTouchUV">
vector llDetectedTouchUV(integer index)
Returns the u and v coordinates in the first two components of a vector, for the texture coordinates where the prim was touched in a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchFace">
integer llDetectedTouchFace(integer index)
Returns the index of the face where the avatar clicked in a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchPos">
vector llDetectedTouchPos(integer index)
Returns the position where the object was touched in a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchNormal">
vector llDetectedTouchNormal(integer index)
Returns the surface normal for a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchBinormal">
vector llDetectedTouchBinormal(integer index)
Returns the surface binormal for a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchST">
vector llDetectedTouchST(integer index)
Returns the s and t coordinates in the first two components of a vector, for the surface coordinates where the prim was touched in a triggered touch event
  </string>
  <string name="LSLTipText_llSHA1String">
string llSHA1String(string src)
Returns a string of 40 hex characters that is the SHA1 security Hash of src
  </string>
  <string name="LSLTipText_llGetFreeURLs">
integer llGetFreeURLs()
Returns the number of available URLs for the current script
  </string>
  <string name="LSLTipText_llRequestURL">
key llRequestURL()
Requests one HTTP:// url for use by this object.
An http_request event is triggered with the results.
  </string>
  <string name="LSLTipText_llRequestSecureURL">
key llRequestSecureURL()
Requests one HTTPS:// (SSL) url for use by this object.
An http_request event is triggered with the results.
  </string>
  <string name="LSLTipText_llReleaseURL">
llReleaseURL(string url)
Releases the specified URL, it will no longer be usable
  </string>
  <string name="LSLTipText_llHTTPResponse">
llHTTPResponse(key request_id, integer status, string body)
Responds to request_id with status and body
  </string>
  <string name="LSLTipText_llGetHTTPHeader">
string llGetHTTPHeader(key request_id, string header)
Returns the value for header for request_id
  </string>
  <string name="LSLTipText_llSetPrimMediaParams">
llSetPrimMediaParams(integer face, list params)
Sets the media params for a particular face on an object. If media is not already on this object, add it.
List is a set of name/value pairs in no particular order.  Params not specified are unchanged, or if new media is added then set to the default specified.
The possible names are below, along with the types of values and what they mean.
  </string>
  <string name="LSLTipText_llGetPrimMediaParams">
list llGetPrimMediaParams(integer face, list params)
Returns the media params for a particular face on an object, given the desired list of names, in the order requested.
(Returns an empty list if no media exists on the face.)
  </string>
  <string name="LSLTipText_llClearPrimMedia">
llClearPrimMedia(integer face)
Clears (deletes) the media and all params from the given face.
  </string>
  <string name="LSLTipText_llSetLinkPrimitiveParamsFast">
llSetLinkPrimitiveParamsFast(integer linknumber, list rules)
Identical to llSetLinkPrimitiveParams() but executes without script delay.
  </string>
  <string name="LSLTipText_llGetLinkPrimitiveParams">
list llGetLinkPrimitiveParams(integer link, list params)
Similar to llGetPrimitiveParams() but applies to any prim in the link set and without script delay.
  </string>
  <string name="LSLTipText_llLinkParticleSystem">
llLinkParticleSystem(integer link, list params)
Similar to llParticleSystem() but applies to any prim in the link set.
  </string>
  <string name="LSLTipText_llSetLinkTextureAnim">
llSetLinkTextureAnim(integer link, integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)
Similar to llSetTextureAnim() but applies to any prim in the link set.
  </string>
  <string name="LSLTipText_llGetLinkNumberOfSides">
integer llGetLinkNumberOfSides(integer link)
Similar to llGetNumberOfSides() but applies to any prim in the link set.
  </string>
  <string name="LSLTipText_llGetUsername" translate="false">
string llGetUsername(key id)
Returns the single-word username of an avatar, if the avatar is in the current region, otherwise the empty string.
  </string>
  <string name="LSLTipText_llRequestUsername" translate="false">
key llRequestUsername(key id)
Requests single-word username of an avatar.  When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llGetDisplayName" translate="false">
string llGetDisplayName(key id)
Returns the name of an avatar, if the avatar is in the current simulator, otherwise the empty string.
  </string>
  <string name="LSLTipText_llRequestDisplayName" translate="false">
key llRequestDisplayName(key id)
Requests name of an avatar.  When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llGetEnv" translate="false">
string llGetEnv(string name)
Returns a string with the requested data about the region.
  </string>
  <string name="LSLTipText_llRegionSayTo" translate="false">
llRegionSayTo(key target, integer channel, string message)
Sends message on channel (not DEBUG_CHANNEL) directly to prim or avatar target anywhere within the region.
  </string>
  <string name="LSLTipText_llScriptProfiler" translate="false">
llScriptProfiler(integer flags)
Enables or disables the scripts profiling state.
Flags can be either of PROFILE_SCRIPT_NONE or PROFILE_SCRIPT_MEMORY.
Applies to Mono-compiled scripts only.
  </string>
  <string name="LSLTipText_llGetSPMaxMemory" translate="false">
integer llGetSPMaxMemory()
Returns the integer of the most bytes used while llScriptProfiler() was last active.
Only relevant for Mono-compiled scripts.
  </string>
  <string name="LSLTipText_llGetUsedMemory" translate="false">
integer llGetUsedMemory()
Returns the integer of the number of bytes of memory currently in use by the script.
Only relevant for Mono-compiled scripts.
  </string>
</strings>

